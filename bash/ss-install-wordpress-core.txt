#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: https://mirrors.slickstack.io/bash/ss-install-wordpress-core.txt ######################
#### path: /var/www/ss-install-wordpress-core ######################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls the WordPress module (CMS) package and non-config files (idempotent) ######
#### module version: WordPress 5.9.x ###############################################################
#### sourced by: ss-install ########################################################################
#### bash aliases: ss install [wordpress|wp] core ##################################################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED AND ON CURRENT BUILD BEFORE RUNNING SS-INSTALL ##
## ENSURE YOUR SS-CONFIG BUILD REMAINS CURRENT BY RUNNING SS-UPDATE OCCASIONALLY ##

## source ss-config ##
source /var/www/ss-config

## source ss-functions ##
source /var/www/ss-functions

## BELOW THIS RELIES ON SS-CONFIG AND SS-FUNCTIONS

####################################################################################################
#### TABLE OF CONTENTS (SS-Install-WordPress-Core) #################################################
####################################################################################################

## this is a brief summary of the different code snippets you will find in this script ##
## each section should be commented so you understand what is being accomplished ##

## A. Touch Timestamp File
## B. Message (Begin Script)
## C. Install Ubuntu Utils
## D. Cleanup Temporary Files
## E. Retrieve WordPress Core ZIP 
## F. 

####################################################################################################
#### A. SS-Install-WordPress-Core: Touch Timestamp File ############################################
####################################################################################################

## this is a dummy timestamp file that will remember the last time this script was run ##
## it can be useful for developer reference and is sometimes used by SlickStack ##

## script timestamp ##
ss_touch "${TIMESTAMP_SS_INSTALL_WORDPRESS_CORE}"

####################################################################################################
#### B. SS-Install-WordPress-Core: Message (Begin Script) ##########################################
####################################################################################################

## this is a simple message that announces to the shell the purpose of this bash script ##
## it will only be noticed by sudo users who manually call ss core bash scripts ##

## echo message ##
echo -e "${COLOR_INFO}Running ss-install-wordpress-core: Reinstalls the WordPress module (CMS) package and non-config files (idempotent)... ${NOCOLOR}"
sleep "${SLEEP_MESSAGE_BEGIN}"

####################################################################################################
#### C. SS-Install-WordPress-Core: Install Ubuntu Utils ############################################
####################################################################################################

## run ss-install-ubuntu-utils ##
source "${PATH_SS_INSTALL_UBUNTU_UTILS}"

####################################################################################################
#### D. SS-Install-WordPress-Core: Cleanup Temporary Files #########################################
####################################################################################################

## delete tmp files ##
ss_rm "${TMP_WORDPRESS_ZIP}"
ss_rm /var/www/html/wordpress*
ss_rm /var/www/html/staging/wordpress*
ss_rm /var/www/html/dev/wordpress*

####################################################################################################
#### E. SS-Install-WordPress-Core: Retrieve WordPress Core ZIP #####################################
####################################################################################################

## CMS modules are installed by SlickStack via files from our public mirror servers ##
## we always install the latest stable minor version (never major versions) ##

## retrieve latest version ##
ss_wget_slow -O "${TMP_WORDPRESS_ZIP}" "${MIRROR_THIRDPARTY_WORDPRESS_ZIP}"

## otherwise try slickstack repo ##
if [[ ! -f "${TMP_WORDPRESS_ZIP}" ]]; then
    ss_wget_slow -O "${TMP_WORDPRESS_ZIP}" "${MIRROR_WORDPRESS_ZIP}"
fi

####################################################################################################
#### SS-Install-WordPress-Core: Install WordPress Core (Production) ################################
####################################################################################################

## this installation process removes outdated WordPress Core files or potential malware ##
## it is not foolproof but it should address several common infection targets ##

## cleanup old files ##
if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_WP_ADMIN}" != "false" ]]; then
    ss_rm /var/www/html/wp-admin
fi

if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_WP_INCLUDES}" != "false" ]]; then
    ss_rm /var/www/html/wp-includes
fi

if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_PHP_FILES_ROOT}" != "false" ]]; then
    find /var/www/html/ -maxdepth 1 -type f ! -name "wp-config.php" -name "*.php" -delete 
fi

## prepare new files ##
ss_cp "${TMP_WORDPRESS_ZIP}" /var/www/html
unzip /var/www/html/wordpress.zip -d /var/www/html
chown -R www-data:wordpress /var/www/html/wordpress
chmod 775 /var/www/html/wordpress

## install new files ##
rsync /var/www/html/wordpress/* /var/www/html

####################################################################################################
#### SS-Install-WordPress-Core: Install WordPress Core (Staging) ###################################
####################################################################################################

## this installation process removes outdated WordPress Core files or potential malware ##
## it is not foolproof but it should address several common infection targets ##

if [[ "${STAGING_SITE}" == "true" ]]; then 

    ## cleanup old files ##
    if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_WP_ADMIN}" != "false" ]]; then
        ss_rm /var/www/html/staging/wp-admin
    fi

    if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_WP_INCLUDES}" != "false" ]]; then
        ss_rm /var/www/html/staging/wp-includes
    fi

    if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_PHP_FILES_ROOT}" != "false" ]]; then
        find /var/www/html/staging/ -maxdepth 1 -type f ! -name "wp-config.php" -name "*.php" -delete 
    fi

    ## prepare new files ##
    cp "${TMP_WORDPRESS_ZIP}" /var/www/html/staging
    unzip /var/www/html/staging/wordpress.zip -d /var/www/html/staging
    chown -R www-data:wordpress /var/www/html/staging/wordpress
    chmod 775 /var/www/html/staging/wordpress
    
    ## install new files files ##
    rsync /var/www/html/staging/wordpress/* /var/www/html/staging
    
fi

####################################################################################################
#### SS-Install-WordPress-Core: Install WordPress Core (Development) ###############################
####################################################################################################

## this installation process removes outdated WordPress Core files or potential malware ##
## it is not foolproof but it should address several common infection targets ##

if [[ "${DEV_SITE}" == "true" ]]; then 

    ## cleanup old files ##
    if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_WP_ADMIN}" != "false" ]]; then
        ss_rm /var/www/html/dev/wp-admin
    fi

    if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_WP_INCLUDES}" != "false" ]]; then
        ss_rm /var/www/html/dev/wp-includes
    fi

    if [[ -f "${TMP_WORDPRESS_ZIP}" ]] && [[ "${SS_INSTALL_WORDPRESS_CORE_DELETE_PHP_FILES_ROOT}" != "false" ]]; then
        find /var/www/html/dev/ -maxdepth 1 -type f ! -name "wp-config.php" -name "*.php" -delete 
    fi

    ## prepare new files ##
    cp "${TMP_WORDPRESS_ZIP}" /var/www/html/dev
    unzip /var/www/html/dev/wordpress.zip -d /var/www/html/dev
    chown -R www-data:wordpress /var/www/html/dev/wordpress
    chmod 775 /var/www/html/dev/wordpress
    
    ## install new files ##
    rsync /var/www/html/dev/wordpress/* /var/www/html/dev
    
fi

####################################################################################################
#### SS-Install-WordPress-Core: Populate Database Options (Production) #############################
####################################################################################################

## minimum wp_options required to avoid /wp-admin/install.php redirect are below: ##
## home/siteurl, blogname, admin_user, admin_email, admin_password ##

## populate wp_options if not exists ##
if [[ -z $(mysql --execute "SHOW TABLES FROM ${DB_NAME} WHERE Tables_in_${DB_NAME} LIKE '${DB_PREFIX}options';" 2> /dev/null) ]]; then
    /usr/bin/php -q -r "
    include '/var/www/html/wp-admin/install.php';
    wp_install('prod site', '"${SFTP_USER}"', '"${SFTP_USER}"@"${SITE_DOMAIN_EXCLUDING_WWW}"', 1, '', '"${SFTP_PASSWORD}"');
    " > /dev/null 2>&1
fi

####################################################################################################
#### SS-Install-WordPress-Core: Populate Database Options (Development) ############################
####################################################################################################

## minimum wp_options required to avoid /wp-admin/install.php redirect are below: ##
## home/siteurl, blogname, admin_user, admin_email, admin_password ##

if [[ "${DEV_SITE}" == "true" ]]; then
    INSTALLED_ALREADY_DEV=$(mysql --database=development --execute="SELECT * FROM ${DB_PREFIX}options WHERE option_name LIKE 'admin_email'"; 2> /dev/null)
    if [[ -z "${INSTALLED_ALREADY_DEV}" ]]; then 
    /usr/bin/php -q -r "
    include '/var/www/html/dev/wp-admin/install.php';
    wp_install('dev site', '"${SFTP_USER}"', '"${SFTP_USER}"@"${SITE_DOMAIN_EXCLUDING_WWW}"', 1, '', '"${SFTP_PASSWORD}"');
    "
    fi
fi

# mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='${SITE_DOMAIN}' WHERE option_name='blogname'";
# mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_email'";
### mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_password'";
# mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_email'"; ## NULL

####################################################################################################
#### SS-Install-WordPress-Core: Optimize WP_Options (For Virgin Installs) ##########################
####################################################################################################

## minimum options required to avoid /wp-admin/install.php redirect are as follows ##
## home/siteurl, blogname, admin_user, admin_email, admin_password ##

# home/siteurl is done below so just these
# mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='${SITE_DOMAIN}' WHERE option_name='blogname'";
# mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_email'";
### mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_password'";

if [[ ! -f "$TIMESTAMP_SS_INSTALL_WORDPRESS_CORE" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_CLEANUP_OPTIONS" == "disabledfornow" ]]; then

## optimize wp_options ##
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_email'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='mystery' WHERE option_name='avatar_default'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='PG' WHERE option_name='avatar_rating'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='blacklist_keys'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='UTF-8' WHERE option_name='blog_charset'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='blog_public'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='blogdescription'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='blogname'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='/.' WHERE option_name='category_base'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='90' WHERE option_name='close_comments_days_old'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='close_comments_for_old_posts'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='2' WHERE option_name='comment_max_links'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='comment_moderation'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='asc' WHERE option_name='comment_order'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='comment_registration'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='comment_whitelist'"; ## previously approved comments not required in order to be whitelisted
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='comments_notify'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='50' WHERE option_name='comments_per_page'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='M j, Y' WHERE option_name='date_format'"; ## M j, Y = Nov 6, 2010
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='open' WHERE option_name='default_comment_status'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='newest' WHERE option_name='default_comments_page'"; ## show newest comments on 1st page
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='closed' WHERE option_name='default_ping_status'"; ## disable pingbacks
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='default_pingback_flag'"; ## disable pingbacks
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='subscriber' WHERE option_name='default_role'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='embed_autourls'"; ## disable automatic (oEmbed) social media embeds
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='600' WHERE option_name='embed_size_h'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='embed_size_w'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='enable_app'"; ## disable the Atom protocol
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='enable_xmlrpc'"; ## disable the XML-RPC protocol (REST API is already in WP Core)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='gmt_offset'"; ## 0 = GMT (UTC)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='gzipcompression'"; ## disable Gzip in WP (PHP) and let the server handle it
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='hack_file'"; ## legacy feature
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='text/html' WHERE option_name='html_type'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='none' WHERE option_name='image_default_align'"; ## disable image alignment by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='none' WHERE option_name='image_default_link_type'"; ## disable image links by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='medium' WHERE option_name='image_default_size'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1024' WHERE option_name='large_size_h'"; ## large images height = 1024px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1024' WHERE option_name='large_size_w'"; ## large images width = 1024px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='link_manager_enabled'"; ## disable janky links menu
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_login'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_pass'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_port'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_url'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='768' WHERE option_name='medium_large_size_h'"; ## medium-large images height = 768px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='768' WHERE option_name='medium_large_size_w'"; ## medium-large images width = 768px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='300' WHERE option_name='medium_size_h'"; ## medium images height = 300px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='300' WHERE option_name='medium_size_w'"; ## medium images width = 300px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='moderation_keys'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='moderation_notify'"; ## email the admin when comments need moderation
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='page_comments'"; ## disable paged comments by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='page_for_posts'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='2' WHERE option_name='page_on_front'"; ## 2 = sample page
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='/%category%/%postname%' WHERE option_name='permalink_structure'"; ## perfect for custom post types and taxonomies
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='ping_sites'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='10' WHERE option_name='posts_per_page'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='10' WHERE option_name='posts_per_rss'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='require_name_email'"; ## comment authors must include their name and email address
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='rss_use_excerpt'"; ## encourage RSS subscribers to click through excerpts
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='show_avatars'"; ## enable comment avatars
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='show_comments_cookies_opt_in'"; ## disable the opt-in warning for comment cookies (GDPR bloat)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='page' WHERE option_name='show_on_front'"; ## depends on page_on_front
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='sidebars_widgets'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='site_icon'"; ## disabled by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='start_of_week'"; ## 1 = Monday
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='/tag' WHERE option_name='tag_base'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='thread_comments'"; ## enable threaded comments
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='2' WHERE option_name='thread_comments_depth'"; ## depth of comment threads = 2 levels (similar to Facebook, YouTube, etc)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='thumbnail_crop'"; ## crop image thumbnails to exact dimensions (not proportional)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='150' WHERE option_name='thumbnail_size_h'"; ## image thumbnails height = 150px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='150' WHERE option_name='thumbnail_size_w'"; ## image thumbnails width = 150px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='g:ia' WHERE option_name='time_format'"; ## g:i a = 12:50 am
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='timezone_string'"; ## NULL (e.g. UTC but might overwrite gmt_offset)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='upload_path'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='upload_url_path'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='uploads_use_yearmonth_folders'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='use_balanceTags'"; ## disable XHTML corrections
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='use_smilies'"; ## disable emojis
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='use_trackback'"; ## disable trackbacks
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='users_can_register'"; ## disable new user (guest) registrations by default

fi

####################################################################################################
#### SS-Install-WordPress-Core: Modify Site Domains In Database ####################################
####################################################################################################

## here we manually fix certain fields in the database to ensure proper functionality ##
## this fix required for WP Multisite (wp-config.php enough for single sites) ##

## SNIPPET: ss-install-wordpress-config, ss-install-wordpress-core
## UPDATED: 28MAR2022

## production ##
if [[ -n $(mysql --execute "SHOW TABLES FROM ${DB_NAME} WHERE Tables_in_${DB_NAME} LIKE '${DB_PREFIX}options';" 2> /dev/null) ]]; then
    
    mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='https://${SITE_DOMAIN}' WHERE option_name='home'";
    mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='https://${SITE_DOMAIN}' WHERE option_name='siteurl'";
    
fi

## staging ##
if [[ "$STAGING_SITE" == "true" ]]; then 
    
    if [[ -n $(mysql --execute "SHOW TABLES FROM staging WHERE Tables_in_staging LIKE '${DB_PREFIX}options';" 2> /dev/null) ]]; then
    
        mysql --execute="UPDATE staging.${DB_PREFIX}options SET option_value='https://staging.${SITE_DOMAIN_EXCLUDING_WWW}' WHERE option_name='home'";
        mysql --execute="UPDATE staging.${DB_PREFIX}options SET option_value='https://staging.${SITE_DOMAIN_EXCLUDING_WWW}' WHERE option_name='siteurl'";
    fi
    
fi

## development ##
if [[ "$DEV_SITE" == "true" ]]; then 
    
    if [[ -n $(mysql --execute "SHOW TABLES FROM development WHERE Tables_in_development LIKE '${DB_PREFIX}options';" 2> /dev/null) ]]; then
    
        mysql --execute="UPDATE development.${DB_PREFIX}options SET option_value='https://dev.${SITE_DOMAIN_EXCLUDING_WWW}' WHERE option_name='home'";
        mysql --execute="UPDATE development.${DB_PREFIX}options SET option_value='https://dev.${SITE_DOMAIN_EXCLUDING_WWW}' WHERE option_name='siteurl'";
    fi

fi

####################################################################################################
#### SS-Install-WordPress-Core: Run SS-Sync-Staging #################################
####################################################################################################

## we include the sync to staging while installing WordPress Core to avoid blank sites ##
## otherwise the staging site files/database would potentially display broken ##

## run ss-sync-staging ##
source "${PATH_SS_SYNC_STAGING}"

####################################################################################################
#### SS-Install-WordPress-Core: Purge Cache (PHP OPcache) ##########################################
####################################################################################################

## run ss-purge-opcache ##
source "${PATH_SS_PURGE_OPCACHE}"

####################################################################################################
#### SS-Install-WordPress-Core: Reset Permissions (WordPress Core) #################################
####################################################################################################

## run ss-perms-wordpress-core ##
source "${PATH_SS_PERMS_WORDPRESS_CORE}"

####################################################################################################
#### SS-Install-WordPress-Core: Cleanup Temporary Files ############################################
####################################################################################################

## delete tmp files ##
ss_rm "${TMP_WORDPRESS_ZIP}"
ss_rm /var/www/html/wordpress*
ss_rm /var/www/html/staging/wordpress*
ss_rm /var/www/html/dev/wordpress*

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://github.com/littlebizzy/throwaway-theme/blob/master/functions.php
## Ref: https://pressidium.com/blog/2020/wordpress-image-sizes-explained/
## Ref: https://developer.wordpress.org/cli/commands/core/install/
## Ref: https://www.linuxtweaks.in/how-to-install-wordpress-using-bash-script-and-wp-cli/
## Ref: https://stackoverflow.com/questions/10062513/install-wordpress-using-bash-shell-without-visiting-wp-admin-install-php
## Ref: https://serverascode.com/2014/06/22/automated-wordpress-database-deployment.html
## Ref: https://web.archive.org/web/20140711110900/http://www.openlogic.com/wazi/bid/324425/How-to-install-WordPress-from-the-command-line
## Ref: https://wordpress.org/support/article/how-to-install-wordpress/
## Ref: https://stackoverflow.com/questions/6781225/how-do-i-check-if-a-directory-has-child-directories/6781343
## Ref: https://www.cloudsavvyit.com/1081/check-a-value-in-a-mysql-database-from-a-linux-bash-script/
## Ref: https://www.php.net/manual/en/features.commandline.options.php
## Ref: https://stackoverflow.com/questions/33067909/bash-variable-under-a-mysql-query

## SS_EOF
